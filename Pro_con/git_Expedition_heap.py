import numpy as np
from heap import heap_struct


# 蟻本：プライオリティキューを用いる練習問題
# ドラックで距離Lの道を移動します。初めトラックにはガソリンがP積まれています。このトラックは距離1走るとガソリン1減る。
# 途中でガソリンが0になってしまうとトラックは停止し、移動に失敗する
# 途中にガソリンスタンドはN個あり、各ガソリンスタンドiはのスタート点から距離A_1の地点にあり、B_iだけガソリンを補給できる。
# トラックは移動を完了できるか？その際、最小で何回のガソリンの補給が必要か？完了できる場合は最小の補給回数を、できない場合は-1を出力せよ。
# 1<= N <= 10000,1<=L<=1000000,1<=P<=1000000,1<=A_1<L,1<=B_i<100


def solve(L,N,P,A,B):
    gas = heap_struct()
    times = 0
    prog = 0 # 進行距離
    for iter in range(100000):
        L = L-P #ゴールまでの距離
        for i in range(N):
            if prog < A[i] <= P:
                gas.add(-B[i]) # 通過したガソスタを追加

        prog = prog + P #進んだ距離

        if L <= 0:
            print('到着したよおおおおおおおおおおおおおお!')
            break #distが0以下ならトラック到着で終了
        else:
            if gas.num == 0:
                times = -1
                print('届かなかった。。。。。。')
                break #通ったガソスタ無くなってトラック到着できず
            else:
                supp = -gas.pick() #通ったガソスタで最大量を追加
                P = supp
                times = times + 1 # 補給回数+1
                print('補給なう')
    return times



def main():

    L = 1000 #走る距離
    N = 10 #ガソリンスタンドの数
    P = 100 #ガソリンの初期値

    A = np.array([70,100,230,300,320,400,460,600,700,840]) # ガソリンスタンドの距離
    B = np.array([20,70,100,50,400,200,350,90,30,100]) #ガソリンスタンドのガソリン量

    print('補給回数: %s'%solve(L,N,P,A,B))


if __name__ == '__main__':
    main()
